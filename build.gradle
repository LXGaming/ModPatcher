buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

repositories {
    mavenCentral()
    maven { url 'http://repo.nallar.me/' }
}

configurations {
    bundledLibs
    compile {
        extendsFrom bundledLibs
    }
}

dependencies {
    compile 'com.google.guava:guava:18.0'
    bundledLibs 'me.nallar:javapatcher:1.0-SNAPSHOT'
    bundledLibs 'org.javassist:javassist:3.18.2-GA'
    bundledLibs 'com.github.stephenc.high-scale-lib:high-scale-lib:1.1.4'
    bundledLibs 'org.codehaus.jackson:jackson-core-lgpl:1.9.13'
    bundledLibs 'org.codehaus.jackson:jackson-mapper-lgpl:1.9.13'
}

minecraft {
    version = "1.7.10-10.13.0.1208"
    runDir = "eclipse/assets"
}

jar {
    from(configurations.bundledLibs.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/**"
    }
	from './build/unpacked/conf/packaged.srg'
    from './generated/extendsMap.obj'
}

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

version = '1.7.10-SNAPSHOT'
group = 'me.nallar'
archivesBaseName = 'modpatcher'

// Extended project information
ext.projectName = 'ModPatcher'
ext.inceptionYear = '2014'
ext.packaging = 'jar'
ext.url = 'http://nallar.me/minecraft'
ext.description = 'Mod Patcher'
ext.organization = 'nallar.me'

// Define variables
ext.buildNumber = project.hasProperty("buildNumber") ? buildNumber : '0'
ext.ciSystem = project.hasProperty("ciSystem") ? ciSystem : 'unknown'
ext.commit = project.hasProperty("commit") ? commit : 'unknown'

// Source compiler configuration
tasks.withType(JavaCompile) {
    options.compilerArgs += [ '-Xlint:all', '-Xlint:-path' ]
    options.deprecation = true
    options.encoding = 'utf8'
}

import me.nallar.mappingsgenerator.Main;

// used later to call the main stuff.

afterEvaluate {
    project.tasks.deobfBinJar.doLast { task ->
        Main.generateMappings(task.getOutDirtyJar(), false)
    }
    project.tasks.extractMinecraftSrc.doLast { task ->
        Main.generateMappings("./build/tmp/recompSrc", true)
    }
}

jar.manifest.mainAttributes(
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "Implementation-Title": name,
        "Implementation-Version": version + "+" + ciSystem + "-b" + buildNumber + ".git-" + commit,
        "Implementation-Vendor": url)
