buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
	}
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

// Extended project information
ext.projectName = 'ModPatcher'
ext.inceptionYear = '2014'
ext.packaging = 'jar'
ext.url = 'http://nallar.me/minecraft'
ext.description = 'Mod Patcher'
ext.organization = 'nallar.me'
ext.mcVersion = '1.8.9'
ext.forgeVersion = "11.15.0.1683"
ext.fullForgeVersion = mcVersion + "-" + forgeVersion

minecraft {
	version = fullForgeVersion
	runDir = "eclipse/assets"
	mappings = "stable_20"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = mcVersion + '-SNAPSHOT'
group = 'me.nallar'
archivesBaseName = 'modpatcher'

// Define variables
ext.buildNumber = System.getenv("BUILD_NUMBER") ?: 0
ext.ciSystem = System.getenv("JENKINS_URL") ? 'Jenkins' : 'unknown'
ext.commit = System.getenv("GIT_COMMIT") ?: 'unknown'

repositories {
	mavenCentral()
	maven { url 'http://repo.nallar.me/' }
}

configurations {
	all {
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	}
	provided
	compile.extendsFrom provided
}

dependencies {
	provided 'com.google.guava:guava:18.0'
	compile group: 'me.nallar', name: 'javapatcher', version: '1.1-SNAPSHOT', changing: true
	compile 'org.javassist:javassist:3.18.2-GA'
}

if (System.env.GRADLE_USER_HOME) {
	ext.homeDir = System.env.GRADLE_USER_HOME + '/'
} else {
	ext.homeDir = System.properties['user.home'] + '/.gradle/'
}
ext.mappingsPath = homeDir + 'caches/minecraft/net/minecraftforge/forge/' + fullForgeVersion + '/unpacked/conf/'

jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from((configurations.runtime - configurations.provided).filter { it.exists() }.collect {
		it.isDirectory() ? it : zipTree(it)
	}) {
		exclude "META-INF/**"
	}
	from mappingsPath + 'packaged.srg'
	from mappingsPath + 'methods.csv'
	from mappingsPath + 'fields.csv'
	from './generated/extendsMap.obj'
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version': project.version, 'mcversion': project.minecraft.version, 'name': project.projectName
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) { exclude 'mcmod.info' }
}

// Source compiler configuration
tasks.withType(JavaCompile) {
	options.compilerArgs += ['-Xlint:all', '-Xlint:-path']
	options.deprecation = true
	options.encoding = 'utf8'
}

import me.nallar.mappingsgenerator.Main;

afterEvaluate {
	project.tasks.deobfMcMCP.doLast { task ->
		Main.generateMappings(task.getOutJar())
	}
	project.tasks.remapMcSources.doLast { task ->
		Main.extractGeneratedSources(task.getOutJar())
	}
}

jar.manifest.mainAttributes(
	"Built-By": System.properties['user.name'],
	"Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
	"Implementation-Title": name,
	"Implementation-Version": version + "+" + ciSystem + "-b" + buildNumber + ".git-" + commit,
	"Implementation-Vendor": url,
	"FMLCorePlugin": "me.nallar.modpatcher.CoreMod"
)
